"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mqtt_constants_1 = require("../mqtt.constants");
const packet_stream_1 = require("../packet-stream");
const mqtt_packet_1 = require("../mqtt.packet");
const errors_1 = require("../errors");
class SubscribeRequestPacket extends mqtt_packet_1.MqttPacket {
    constructor(topic, qosLevel = 1) {
        super(mqtt_constants_1.PacketTypes.TYPE_SUBSCRIBE);
        this.assertValidQosLevel(qosLevel);
        this.assertValidString((topic !== null && topic !== void 0 ? topic : ''));
        this._topic = (topic !== null && topic !== void 0 ? topic : '');
        this._qosLevel = qosLevel;
        this.packetFlags = 2;
    }
    get hasIdentifier() {
        return true;
    }
    get qosLevel() {
        return this._qosLevel;
    }
    set qosLevel(value) {
        this.assertValidQosLevel(value);
        this._qosLevel = value;
    }
    get topic() {
        return this._topic;
    }
    set topic(value) {
        this.assertValidString(value);
        this._topic = value;
    }
    read() {
        throw new errors_1.InvalidDirectionError('read');
    }
    write(stream) {
        const data = packet_stream_1.PacketStream.empty()
            .writeString(this._topic)
            .writeByte(this._qosLevel);
        this.remainingPacketLength = data.length;
        super.write(stream);
        stream.write(data.data);
    }
}
exports.SubscribeRequestPacket = SubscribeRequestPacket;
//# sourceMappingURL=subscribe.request.packet.js.map