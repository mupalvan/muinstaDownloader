"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transport_1 = require("./transport");
const tls_1 = require("tls");
const URL = require("url");
const socks_1 = require("socks");
class TlsTransport extends transport_1.Transport {
    send(data) {
        this.socket.write(data);
    }
    async connect() {
        var _a;
        const url = URL.parse(this.options.url);
        const host = (_a = url.hostname, (_a !== null && _a !== void 0 ? _a : ''));
        const port = Number(url.port);
        let proxySocket;
        if (this.options.proxyOptions !== undefined) {
            const info = await socks_1.SocksClient.createConnection({
                proxy: this.options.proxyOptions,
                command: 'connect',
                destination: {
                    host,
                    port,
                }
            });
            proxySocket = info.socket;
        }
        this.socket = tls_1.connect({
            socket: proxySocket,
            host,
            port,
            enableTrace: !!this.options.enableTrace,
            timeout: 0,
        });
        this.socket.on('error', e => this.callbacks.error(e));
        this.socket.on('end', () => this.callbacks.disconnect());
        this.socket.on('close', () => this.callbacks.disconnect());
        this.socket.on('secureConnect', () => this.callbacks.connect());
        this.socket.on('timeout', () => this.callbacks.disconnect());
        this.socket.on('data', res => this.callbacks.data(res));
    }
    disconnect() {
        this.socket.removeAllListeners('close');
        this.socket.end();
    }
}
exports.TlsTransport = TlsTransport;
//# sourceMappingURL=tls.transport.js.map